<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intervals</name>
    </assembly>
    <members>
        <member name="T:Intervals.IInterval`1">
            <summary>
            Represents an interval of comparable values.
            </summary>
            <typeparam name="T">The type of values included in the interval.</typeparam>
        </member>
        <member name="M:Intervals.IInterval`1.Clone(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            Clones an interval with the specified values.
            </summary>
            <param name="start">The new starting value.</param>
            <param name="startInclusive">A value indicating whether or not the new starting value is included in the new interval.</param>
            <param name="end">The new ending value.</param>
            <param name="endInclusive">A value indicating whether or not the new ending value is included in the new interval.</param>
            <returns>A copy of this interval with the specified values.</returns>
        </member>
        <member name="P:Intervals.IInterval`1.Start">
            <summary>
            Gets the starting value of this interval.
            </summary>
        </member>
        <member name="P:Intervals.IInterval`1.StartInclusive">
            <summary>
            Gets a value indicating whether or not the starting value of this interval is included in the interval.
            </summary>
        </member>
        <member name="P:Intervals.IInterval`1.End">
            <summary>
            Gets the ending value of this interval.
            </summary>
        </member>
        <member name="P:Intervals.IInterval`1.EndInclusive">
            <summary>
            Gets a value indicating whether or not the ending value of this interval is included in the interval.
            </summary>
        </member>
        <member name="T:Intervals.IntegerInterval">
            <summary>
            Represents an interval between integers.
            </summary>
        </member>
        <member name="M:Intervals.IntegerInterval.#ctor(System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Intervals.IntegerInterval"/> class.
            </summary>
            <param name="start">The starting value of the interval.</param>
            <param name="startInclusive">A value indicating whether or not the starting value of this interval is included in the interval.</param>
            <param name="end">The ending value of the interval.</param>
            <param name="endInclusive">A value indicating whether or not the ending value of this interval is included in the interval.</param>
        </member>
        <member name="M:Intervals.IntegerInterval.Clone(System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Returns a new interval with the specified values.
            </summary>
            <param name="start">The new starting value.</param>
            <param name="startInclusive">A value indicating whether or not the new starting value is included in the new interval.</param>
            <param name="end">The new ending value.</param>
            <param name="endInclusive">A value indicating whether or not the new ending value is included in the new interval.</param>
            <returns>A new interval with the specified values.</returns>
        </member>
        <member name="M:Intervals.IntegerInterval.Intervals#IInterval{System#Int32}#Clone(System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Clones an interval with the specified values.
            </summary>
            <param name="start">The new starting value.</param>
            <param name="startInclusive">A value indicating whether or not the new starting value is included in the new interval.</param>
            <param name="end">The new ending value.</param>
            <param name="endInclusive">A value indicating whether or not the new ending value is included in the new interval.</param>
            <returns>A copy of this interval with the specified values.</returns>
        </member>
        <member name="M:Intervals.IntegerInterval.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:Intervals.IntegerInterval.Start">
            <summary>
            Gets the starting value of this interval.
            </summary>
        </member>
        <member name="P:Intervals.IntegerInterval.StartInclusive">
            <summary>
            Gets a value indicating whether or not the starting value of this interval is included in the interval.
            </summary>
        </member>
        <member name="P:Intervals.IntegerInterval.End">
            <summary>
            Gets the ending value of this interval.
            </summary>
        </member>
        <member name="P:Intervals.IntegerInterval.EndInclusive">
            <summary>
            Gets a value indicating whether or not the ending value of this interval is included in the interval.
            </summary>
        </member>
        <member name="T:Intervals.IntervalExtensions">
            <summary>
            Provides methods for working with object implementing <see cref="T:Intervals.IInterval`1"/>.
            </summary>
        </member>
        <member name="M:Intervals.IntervalExtensions.IsEmpty``1(Intervals.IInterval{``0})">
            <summary>
            Tests an interval to determine if it is empty.
            </summary>
            <typeparam name="T">The type of values included in the interval.</typeparam>
            <param name="interval">The interval to test.</param>
            <returns>true, if the interval is null or considered empty; false, otherwise.</returns>
            <remarks>
            If an interval has the same start and end values, but either the start or end value is not inclusive, the interval is empty.
            An interval is also considered empty if its start value is greater than its end value.
            </remarks>
        </member>
        <member name="M:Intervals.IntervalExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}})">
            <summary>
            Tests a set of intervals to see if it is empty.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="set">The set of intervals to test.</param>
            <returns>true, if the set is null or considered empty; false, otherwise.</returns>
            <remarks>
            See <see cref="M:Intervals.IntervalExtensions.IsEmpty``1(Intervals.IInterval{``0})"/> for remarks.
            </remarks>
        </member>
        <member name="M:Intervals.IntervalExtensions.Contains``1(Intervals.IInterval{``0},``0)">
            <summary>
            Tests an interval to see if it contains a given value.
            </summary>
            <typeparam name="T">The type of values included in the interval.</typeparam>
            <param name="interval">The interval to test.</param>
            <param name="value">The value to test.</param>
            <returns>true, if the interval is non-empty and contains the value; false, otherwise.</returns>
        </member>
        <member name="M:Intervals.IntervalExtensions.Contains``1(Intervals.IInterval{``0},Intervals.IInterval{``0})">
            <summary>
            Tests an interval to see if it wholly contains another interval.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="interval">The interval to test.</param>
            <param name="other">The other interval.</param>
            <returns>true, if <paramref name="interval"/> contains <paramref name="other"/>; false, otherwise.</returns>
            <remarks>
            All intervals (including empty ones) contain every other empty interval.  So, if <paramref name="other"/> is empty, this method always returns true.
            Otherwise, this method only returns true if the start and end values of <paramref name="interval"/> surround the values of <paramref name="other"/>.
            </remarks>
        </member>
        <member name="M:Intervals.IntervalExtensions.Contains``1(System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}},``0)">
            <summary>
            Tests a set of intervals to see if they contain a value.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="set">The set to test.</param>
            <param name="value">The value to test.</param>
            <returns>true, if the set is non-empty and at least on of its intervals contains the value; false, otherwise.</returns>
        </member>
        <member name="M:Intervals.IntervalExtensions.IntersectWith``1(Intervals.IInterval{``0},Intervals.IInterval{``0})">
            <summary>
            Returns the intersection of two intervals.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="interval">The first interval.</param>
            <param name="other">The second interval.</param>
            <returns>An interval that represents the intersection of the intervals.</returns>
        </member>
        <member name="M:Intervals.IntervalExtensions.UnionWith``1(Intervals.IInterval{``0},Intervals.IInterval{``0})">
            <summary>
            Returns the union of two intervals.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="interval">The first interval.</param>
            <param name="other">The second interval.</param>
            <returns>A set that contains both intervals.</returns>
            <remarks>
            If the intervals intersect, the result will be a set with a single interval.
            </remarks>
        </member>
        <member name="M:Intervals.IntervalExtensions.UnionWith``1(System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}},Intervals.IInterval{``0})">
            <summary>
            Returns the union of a set and an interval.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="set">The set.</param>
            <param name="interval">The interval.</param>
            <returns>A set containing the union of the set and interval.</returns>
        </member>
        <member name="M:Intervals.IntervalExtensions.UnionWith``1(Intervals.IInterval{``0},System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}})">
            <summary>
            Returns the union of an interval and a set.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="interval">The interval.</param>
            <param name="set">The set.</param>
            <returns>A set containing the union of the interval and the set.</returns>
        </member>
        <member name="M:Intervals.IntervalExtensions.UnionWith``1(System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}},System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}})">
            <summary>
            Returns the union of two sets.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="setA">The first set.</param>
            <param name="setB">The second set.</param>
            <returns>A set that contains both sets.</returns>
        </member>
        <member name="M:Intervals.IntervalExtensions.Simplify``1(System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}})">
            <summary>
            Returns a simplified version of a given set.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="set">The set to simplify.</param>
            <returns>The simplified set.</returns>
            <remarks>
            Sets can be simplified if any of their components intersect.
            </remarks>
        </member>
        <member name="M:Intervals.IntervalExtensions.DifferenceWith``1(Intervals.IInterval{``0},Intervals.IInterval{``0})">
            <summary>
            Returns the difference of one interval to another.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="interval">The source interval.</param>
            <param name="other">The interval to exclude.</param>
            <returns>A set that contains every part of <paramref name="interval"/> that is not also contained by <paramref name="other"/>.</returns>
        </member>
        <member name="M:Intervals.IntervalExtensions.DifferenceWith``1(System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}},Intervals.IInterval{``0})">
            <summary>
            Returns the difference between a set and an interval.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="set">The source set.</param>
            <param name="interval">The interval to exclude.</param>
            <returns>A set that contains every part of <paramref name="set"/> that is not also contained by <paramref name="interval"/>.</returns>
        </member>
        <member name="M:Intervals.IntervalExtensions.DifferenceWith``1(Intervals.IInterval{``0},System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}})">
            <summary>
            Returns the difference between an interval and a set.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="interval">The source interval.</param>
            <param name="set">The set to exclude.</param>
            <returns>A set that contains every part of <paramref name="interval"/> that is not also contained by <paramref name="set"/>.</returns>
        </member>
        <member name="M:Intervals.IntervalExtensions.DifferenceWith``1(System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}},System.Collections.Generic.IEnumerable{Intervals.IInterval{``0}})">
            <summary>
            Returns the difference between two sets.
            </summary>
            <typeparam name="T">The type of values included in the intervals.</typeparam>
            <param name="setA">The source set.</param>
            <param name="setB">The set to exclude.</param>
            <returns>A set that contains every part of <paramref name="setA"/> that is not also contained by <paramref name="setB"/>.</returns>
        </member>
        <member name="T:Intervals.StringInterval">
            <summary>
            Represents an interval of characters in a string.
            </summary>
        </member>
        <member name="M:Intervals.StringInterval.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Intervals.StringInterval"/> class.
            </summary>
            <param name="source">The string that this interval describes.</param>
        </member>
        <member name="M:Intervals.StringInterval.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Intervals.StringInterval"/> class.
            </summary>
            <param name="source">The string that this interval describes.</param>
            <param name="start">The starting index of this interval.</param>
            <param name="length">The length of this interval.</param>
        </member>
        <member name="P:Intervals.StringInterval.Source">
            <summary>
            Gets the string that this interval descries.
            </summary>
        </member>
        <member name="P:Intervals.StringInterval.Start">
            <summary>
            Gets the starting index of this interval.
            </summary>
        </member>
        <member name="P:Intervals.StringInterval.Length">
            <summary>
            Gets the length of this interval.
            </summary>
        </member>
        <member name="P:Intervals.StringInterval.End">
            <summary>
            Gets the ending index of this interval.
            </summary>
        </member>
        <member name="P:Intervals.StringInterval.Value">
            <summary>
            Gets the portion of the string represented by this interval.
            </summary>
        </member>
    </members>
</doc>
